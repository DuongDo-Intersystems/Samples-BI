ROUTINE buildsamplebi
 // This is buildsamplebi from https://github.com/intersystems/Samples-BI
 // Use or operation of this code is subject to acceptance of the license available in the code repository for this code.

    write !!, "This is the setup routine for the Samples-BI sample, which is meant for use "
    write !, "with the InterSystems IRIS Business Intelligence capabilities. To use this sample,"
    write !, "you must have an InterSystems IRIS license that includes analytics capabilities."

    write !, "Please specify the directory that contains this sample."
    write !, "(This is the directory that contains the README.md and LICENSE files.)", !
    read stagingroot
    set OK=$$run(stagingroot,1)
    
    if OK {
        write !!, "IMPORTANT: See the README.md file for information on the next setup steps, "
        write !, "which are manual but simple. Then see the README.md file for details on this "
        write !, "sample and links to related documentation."
        write !!, "IMPORTANT: If there were build errors while setting up this sample, your "
        write !, "license may not include analytics capabilities."
    }


run(stagingroot, interactive) public {
    if '$DATA(interactive) {
        set interactive=0
    }

    if $ZSTRIP(stagingroot,"<>W")="" {
        if interactive {
            write !, "Not a valid directory... Quitting."
        }
        return 0
    }

    //load and compile classes ***************************
    if interactive {
        write !!, "Loading and compiling classes..."
    }
    set dir=stagingroot_"/cls/"
    if '##class(%File).DirectoryExists(dir) {
        if interactive {
            write !!, "Looking for "_dir
            write !, "but it does not exist... Quitting."
        }
        return 0
    }
    do $system.OBJ.LoadDir(dir,"ck",,1)

    // execute the setup code in the loaded classes *********************
    if '##class(%Dictionary.CompiledClass).%ExistsId("BI.Populate") {
        if interactive {
            write !!, "Looking for the class BI.Populate"
            write !, "but it does not exist... Quitting."
        }
        return 0
    }
    if interactive {
        write !, "Running the BI.Populate::Setup() method..."
    }
    do ##class(BI.Populate).Setup()

    if '##class(%Dictionary.CompiledClass).%ExistsId("HoleFoods.Utils") {
        if interactive {
            write !!, "Looking for the class HoleFoods.Utils"
            write !, "but it does not exist... Quitting."
        }
        return 0
    }
    if interactive {
        write !, "Running the HoleFoods.Utils::Setup() method..."
    }
    do ##class(HoleFoods.Utils).Setup()
    return 1
 
} 


